import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import numpy as np
df=pd.read_csv("/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv")
print(df.head())
X=df.drop("quality",axis=1)
y=df["quality"]
y=y.apply(lambda q:1 if q>=7 else 0)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
model=RandomForestClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
accuracy=accuracy_score(y_test,y_pred)
print("Accuracy:",accuracy)
joblib.dump(model,"wine_model.pkl")
app=FastAPI()
model=joblib.load("wine_model.pkl")
class WineInput(BaseModel):
    fixed_acidity: float
    volatile_acidity: float
    citric_acid: float
    residual_sugar: float
    chlorides: float
    free_sulfur_dioxide: float
    total_sulfur_dioxide: float
    density: float
    pH: float
    sulphates: float
    alcohol: float

@app.post("/predict")
def predict(data:WineInput):
    input_array=np.array([[data.fixed_acidity, data.volatile_acidity, data.citric_acid,
                             data.residual_sugar, data.chlorides, data.free_sulfur_dioxide,
                             data.total_sulfur_dioxide, data.density, data.pH,
                             data.sulphates, data.alcohol]])
    prediction=model.predict(input_array)[0]
    return{"quality":"good" if prediction==1 else "not good"}
